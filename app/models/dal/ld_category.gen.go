// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-single/app/models/models"
)

func newLdCategory(db *gorm.DB, opts ...gen.DOOption) ldCategory {
	_ldCategory := ldCategory{}

	_ldCategory.ldCategoryDo.UseDB(db, opts...)
	_ldCategory.ldCategoryDo.UseModel(&models.LdCategory{})

	tableName := _ldCategory.ldCategoryDo.TableName()
	_ldCategory.ALL = field.NewAsterisk(tableName)
	_ldCategory.ID = field.NewInt64(tableName, "id")
	_ldCategory.CategoryID = field.NewInt32(tableName, "category_id")
	_ldCategory.CategoryName = field.NewString(tableName, "category_name")
	_ldCategory.CategoryCover = field.NewString(tableName, "category_cover")
	_ldCategory.CategoryURL = field.NewString(tableName, "category_url")
	_ldCategory.CategoryDescribe = field.NewString(tableName, "category_describe")
	_ldCategory.CategoryColor = field.NewString(tableName, "category_color")

	_ldCategory.fillFieldMap()

	return _ldCategory
}

// ldCategory 博客-分类表
type ldCategory struct {
	ldCategoryDo

	ALL              field.Asterisk
	ID               field.Int64
	CategoryID       field.Int32
	CategoryName     field.String // 分类名称
	CategoryCover    field.String // 分类封面
	CategoryURL      field.String // 分类路径
	CategoryDescribe field.String // 描述
	CategoryColor    field.String // 标签颜色

	fieldMap map[string]field.Expr
}

func (l ldCategory) Table(newTableName string) *ldCategory {
	l.ldCategoryDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l ldCategory) As(alias string) *ldCategory {
	l.ldCategoryDo.DO = *(l.ldCategoryDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *ldCategory) updateTableName(table string) *ldCategory {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.CategoryID = field.NewInt32(table, "category_id")
	l.CategoryName = field.NewString(table, "category_name")
	l.CategoryCover = field.NewString(table, "category_cover")
	l.CategoryURL = field.NewString(table, "category_url")
	l.CategoryDescribe = field.NewString(table, "category_describe")
	l.CategoryColor = field.NewString(table, "category_color")

	l.fillFieldMap()

	return l
}

func (l *ldCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *ldCategory) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.ID
	l.fieldMap["category_id"] = l.CategoryID
	l.fieldMap["category_name"] = l.CategoryName
	l.fieldMap["category_cover"] = l.CategoryCover
	l.fieldMap["category_url"] = l.CategoryURL
	l.fieldMap["category_describe"] = l.CategoryDescribe
	l.fieldMap["category_color"] = l.CategoryColor
}

func (l ldCategory) clone(db *gorm.DB) ldCategory {
	l.ldCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l ldCategory) replaceDB(db *gorm.DB) ldCategory {
	l.ldCategoryDo.ReplaceDB(db)
	return l
}

type ldCategoryDo struct{ gen.DO }

func (l ldCategoryDo) Debug() *ldCategoryDo {
	return l.withDO(l.DO.Debug())
}

func (l ldCategoryDo) WithContext(ctx context.Context) *ldCategoryDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l ldCategoryDo) ReadDB() *ldCategoryDo {
	return l.Clauses(dbresolver.Read)
}

func (l ldCategoryDo) WriteDB() *ldCategoryDo {
	return l.Clauses(dbresolver.Write)
}

func (l ldCategoryDo) Session(config *gorm.Session) *ldCategoryDo {
	return l.withDO(l.DO.Session(config))
}

func (l ldCategoryDo) Clauses(conds ...clause.Expression) *ldCategoryDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l ldCategoryDo) Returning(value interface{}, columns ...string) *ldCategoryDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l ldCategoryDo) Not(conds ...gen.Condition) *ldCategoryDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l ldCategoryDo) Or(conds ...gen.Condition) *ldCategoryDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l ldCategoryDo) Select(conds ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l ldCategoryDo) Where(conds ...gen.Condition) *ldCategoryDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l ldCategoryDo) Order(conds ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l ldCategoryDo) Distinct(cols ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l ldCategoryDo) Omit(cols ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l ldCategoryDo) Join(table schema.Tabler, on ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l ldCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l ldCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l ldCategoryDo) Group(cols ...field.Expr) *ldCategoryDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l ldCategoryDo) Having(conds ...gen.Condition) *ldCategoryDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l ldCategoryDo) Limit(limit int) *ldCategoryDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l ldCategoryDo) Offset(offset int) *ldCategoryDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l ldCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ldCategoryDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l ldCategoryDo) Unscoped() *ldCategoryDo {
	return l.withDO(l.DO.Unscoped())
}

func (l ldCategoryDo) Create(values ...*models.LdCategory) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l ldCategoryDo) CreateInBatches(values []*models.LdCategory, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l ldCategoryDo) Save(values ...*models.LdCategory) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l ldCategoryDo) First() (*models.LdCategory, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.LdCategory), nil
	}
}

func (l ldCategoryDo) Take() (*models.LdCategory, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.LdCategory), nil
	}
}

func (l ldCategoryDo) Last() (*models.LdCategory, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.LdCategory), nil
	}
}

func (l ldCategoryDo) Find() ([]*models.LdCategory, error) {
	result, err := l.DO.Find()
	return result.([]*models.LdCategory), err
}

func (l ldCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.LdCategory, err error) {
	buf := make([]*models.LdCategory, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l ldCategoryDo) FindInBatches(result *[]*models.LdCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l ldCategoryDo) Attrs(attrs ...field.AssignExpr) *ldCategoryDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l ldCategoryDo) Assign(attrs ...field.AssignExpr) *ldCategoryDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l ldCategoryDo) Joins(fields ...field.RelationField) *ldCategoryDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l ldCategoryDo) Preload(fields ...field.RelationField) *ldCategoryDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l ldCategoryDo) FirstOrInit() (*models.LdCategory, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.LdCategory), nil
	}
}

func (l ldCategoryDo) FirstOrCreate() (*models.LdCategory, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.LdCategory), nil
	}
}

func (l ldCategoryDo) FindByPage(offset int, limit int) (result []*models.LdCategory, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l ldCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l ldCategoryDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l ldCategoryDo) Delete(models ...*models.LdCategory) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *ldCategoryDo) withDO(do gen.Dao) *ldCategoryDo {
	l.DO = *do.(*gen.DO)
	return l
}
