// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Config         *config
	Recipe         *recipe
	RecipeCategory *recipeCategory
	RecipesComment *recipesComment
	WechatUser     *wechatUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Config = &Q.Config
	Recipe = &Q.Recipe
	RecipeCategory = &Q.RecipeCategory
	RecipesComment = &Q.RecipesComment
	WechatUser = &Q.WechatUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Config:         newConfig(db, opts...),
		Recipe:         newRecipe(db, opts...),
		RecipeCategory: newRecipeCategory(db, opts...),
		RecipesComment: newRecipesComment(db, opts...),
		WechatUser:     newWechatUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Config         config
	Recipe         recipe
	RecipeCategory recipeCategory
	RecipesComment recipesComment
	WechatUser     wechatUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.clone(db),
		Recipe:         q.Recipe.clone(db),
		RecipeCategory: q.RecipeCategory.clone(db),
		RecipesComment: q.RecipesComment.clone(db),
		WechatUser:     q.WechatUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.replaceDB(db),
		Recipe:         q.Recipe.replaceDB(db),
		RecipeCategory: q.RecipeCategory.replaceDB(db),
		RecipesComment: q.RecipesComment.replaceDB(db),
		WechatUser:     q.WechatUser.replaceDB(db),
	}
}

type queryCtx struct {
	Config         *configDo
	Recipe         *recipeDo
	RecipeCategory *recipeCategoryDo
	RecipesComment *recipesCommentDo
	WechatUser     *wechatUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Config:         q.Config.WithContext(ctx),
		Recipe:         q.Recipe.WithContext(ctx),
		RecipeCategory: q.RecipeCategory.WithContext(ctx),
		RecipesComment: q.RecipesComment.WithContext(ctx),
		WechatUser:     q.WechatUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
