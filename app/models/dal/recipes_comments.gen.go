// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-single/app/models/models"
)

func newRecipesComment(db *gorm.DB, opts ...gen.DOOption) recipesComment {
	_recipesComment := recipesComment{}

	_recipesComment.recipesCommentDo.UseDB(db, opts...)
	_recipesComment.recipesCommentDo.UseModel(&models.RecipesComment{})

	tableName := _recipesComment.recipesCommentDo.TableName()
	_recipesComment.ALL = field.NewAsterisk(tableName)
	_recipesComment.ID = field.NewInt32(tableName, "id")
	_recipesComment.CommentID = field.NewInt64(tableName, "comment_id")
	_recipesComment.BeCommentUserID = field.NewInt64(tableName, "be_comment_user_id")
	_recipesComment.CommenterID = field.NewInt64(tableName, "commenter_id")
	_recipesComment.RecipeID = field.NewInt64(tableName, "recipe_id")
	_recipesComment.ParentCommentID = field.NewInt64(tableName, "parent_comment_id")
	_recipesComment.CommentText = field.NewString(tableName, "comment_text")
	_recipesComment.CommentTime = field.NewTime(tableName, "comment_time")
	_recipesComment.HasRead = field.NewInt32(tableName, "has_read")

	_recipesComment.fillFieldMap()

	return _recipesComment
}

type recipesComment struct {
	recipesCommentDo

	ALL             field.Asterisk
	ID              field.Int32
	CommentID       field.Int64
	BeCommentUserID field.Int64  // 被评论人的雪花算法 id
	CommenterID     field.Int64  // 评论人的雪花算法 id
	RecipeID        field.Int64  // 菜品 雪花算法 id
	ParentCommentID field.Int64  // 回复评论类型的id
	CommentText     field.String // 回复的文字内容
	CommentTime     field.Time
	HasRead         field.Int32 // 是否已经阅读过,1,已经读过，2 未读过

	fieldMap map[string]field.Expr
}

func (r recipesComment) Table(newTableName string) *recipesComment {
	r.recipesCommentDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recipesComment) As(alias string) *recipesComment {
	r.recipesCommentDo.DO = *(r.recipesCommentDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recipesComment) updateTableName(table string) *recipesComment {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.CommentID = field.NewInt64(table, "comment_id")
	r.BeCommentUserID = field.NewInt64(table, "be_comment_user_id")
	r.CommenterID = field.NewInt64(table, "commenter_id")
	r.RecipeID = field.NewInt64(table, "recipe_id")
	r.ParentCommentID = field.NewInt64(table, "parent_comment_id")
	r.CommentText = field.NewString(table, "comment_text")
	r.CommentTime = field.NewTime(table, "comment_time")
	r.HasRead = field.NewInt32(table, "has_read")

	r.fillFieldMap()

	return r
}

func (r *recipesComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recipesComment) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["comment_id"] = r.CommentID
	r.fieldMap["be_comment_user_id"] = r.BeCommentUserID
	r.fieldMap["commenter_id"] = r.CommenterID
	r.fieldMap["recipe_id"] = r.RecipeID
	r.fieldMap["parent_comment_id"] = r.ParentCommentID
	r.fieldMap["comment_text"] = r.CommentText
	r.fieldMap["comment_time"] = r.CommentTime
	r.fieldMap["has_read"] = r.HasRead
}

func (r recipesComment) clone(db *gorm.DB) recipesComment {
	r.recipesCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recipesComment) replaceDB(db *gorm.DB) recipesComment {
	r.recipesCommentDo.ReplaceDB(db)
	return r
}

type recipesCommentDo struct{ gen.DO }

func (r recipesCommentDo) Debug() *recipesCommentDo {
	return r.withDO(r.DO.Debug())
}

func (r recipesCommentDo) WithContext(ctx context.Context) *recipesCommentDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recipesCommentDo) ReadDB() *recipesCommentDo {
	return r.Clauses(dbresolver.Read)
}

func (r recipesCommentDo) WriteDB() *recipesCommentDo {
	return r.Clauses(dbresolver.Write)
}

func (r recipesCommentDo) Session(config *gorm.Session) *recipesCommentDo {
	return r.withDO(r.DO.Session(config))
}

func (r recipesCommentDo) Clauses(conds ...clause.Expression) *recipesCommentDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recipesCommentDo) Returning(value interface{}, columns ...string) *recipesCommentDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recipesCommentDo) Not(conds ...gen.Condition) *recipesCommentDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recipesCommentDo) Or(conds ...gen.Condition) *recipesCommentDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recipesCommentDo) Select(conds ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recipesCommentDo) Where(conds ...gen.Condition) *recipesCommentDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recipesCommentDo) Order(conds ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recipesCommentDo) Distinct(cols ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recipesCommentDo) Omit(cols ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recipesCommentDo) Join(table schema.Tabler, on ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recipesCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recipesCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recipesCommentDo) Group(cols ...field.Expr) *recipesCommentDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recipesCommentDo) Having(conds ...gen.Condition) *recipesCommentDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recipesCommentDo) Limit(limit int) *recipesCommentDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recipesCommentDo) Offset(offset int) *recipesCommentDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recipesCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *recipesCommentDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recipesCommentDo) Unscoped() *recipesCommentDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recipesCommentDo) Create(values ...*models.RecipesComment) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recipesCommentDo) CreateInBatches(values []*models.RecipesComment, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recipesCommentDo) Save(values ...*models.RecipesComment) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recipesCommentDo) First() (*models.RecipesComment, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecipesComment), nil
	}
}

func (r recipesCommentDo) Take() (*models.RecipesComment, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecipesComment), nil
	}
}

func (r recipesCommentDo) Last() (*models.RecipesComment, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecipesComment), nil
	}
}

func (r recipesCommentDo) Find() ([]*models.RecipesComment, error) {
	result, err := r.DO.Find()
	return result.([]*models.RecipesComment), err
}

func (r recipesCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RecipesComment, err error) {
	buf := make([]*models.RecipesComment, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recipesCommentDo) FindInBatches(result *[]*models.RecipesComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recipesCommentDo) Attrs(attrs ...field.AssignExpr) *recipesCommentDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recipesCommentDo) Assign(attrs ...field.AssignExpr) *recipesCommentDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recipesCommentDo) Joins(fields ...field.RelationField) *recipesCommentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recipesCommentDo) Preload(fields ...field.RelationField) *recipesCommentDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recipesCommentDo) FirstOrInit() (*models.RecipesComment, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecipesComment), nil
	}
}

func (r recipesCommentDo) FirstOrCreate() (*models.RecipesComment, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecipesComment), nil
	}
}

func (r recipesCommentDo) FindByPage(offset int, limit int) (result []*models.RecipesComment, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recipesCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recipesCommentDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recipesCommentDo) Delete(models ...*models.RecipesComment) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recipesCommentDo) withDO(do gen.Dao) *recipesCommentDo {
	r.DO = *do.(*gen.DO)
	return r
}
