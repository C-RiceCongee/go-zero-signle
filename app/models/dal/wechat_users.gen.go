// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-single/app/models/models"
)

func newWechatUser(db *gorm.DB, opts ...gen.DOOption) wechatUser {
	_wechatUser := wechatUser{}

	_wechatUser.wechatUserDo.UseDB(db, opts...)
	_wechatUser.wechatUserDo.UseModel(&models.WechatUser{})

	tableName := _wechatUser.wechatUserDo.TableName()
	_wechatUser.ALL = field.NewAsterisk(tableName)
	_wechatUser.ID = field.NewInt32(tableName, "id")
	_wechatUser.Userid = field.NewInt64(tableName, "userid")
	_wechatUser.Username = field.NewString(tableName, "username")
	_wechatUser.Avatar = field.NewString(tableName, "avatar")
	_wechatUser.Openid = field.NewString(tableName, "openid")
	_wechatUser.Sessionkey = field.NewString(tableName, "sessionkey")
	_wechatUser.Userpoint = field.NewInt32(tableName, "userpoint")
	_wechatUser.Userstatus = field.NewBool(tableName, "userstatus")
	_wechatUser.CreateTime = field.NewTime(tableName, "create_time")
	_wechatUser.UpdateTime = field.NewTime(tableName, "update_time")
	_wechatUser.CanAddRecipes = field.NewInt32(tableName, "can_add_recipes")

	_wechatUser.fillFieldMap()

	return _wechatUser
}

// wechatUser 用户表，记录系统中的所有用户信息
type wechatUser struct {
	wechatUserDo

	ALL           field.Asterisk
	ID            field.Int32  // 主键为自增的id
	Userid        field.Int64  // 用户ID
	Username      field.String // 用户名
	Avatar        field.String // 用户头像
	Openid        field.String // 微信小程序 openid
	Sessionkey    field.String // 小程序登录凭证
	Userpoint     field.Int32  // 用户积分
	Userstatus    field.Bool   // 用户状态
	CreateTime    field.Time   // 数据创建时间
	UpdateTime    field.Time   // 数据更新时间
	CanAddRecipes field.Int32

	fieldMap map[string]field.Expr
}

func (w wechatUser) Table(newTableName string) *wechatUser {
	w.wechatUserDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wechatUser) As(alias string) *wechatUser {
	w.wechatUserDo.DO = *(w.wechatUserDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wechatUser) updateTableName(table string) *wechatUser {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Userid = field.NewInt64(table, "userid")
	w.Username = field.NewString(table, "username")
	w.Avatar = field.NewString(table, "avatar")
	w.Openid = field.NewString(table, "openid")
	w.Sessionkey = field.NewString(table, "sessionkey")
	w.Userpoint = field.NewInt32(table, "userpoint")
	w.Userstatus = field.NewBool(table, "userstatus")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.CanAddRecipes = field.NewInt32(table, "can_add_recipes")

	w.fillFieldMap()

	return w
}

func (w *wechatUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wechatUser) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["userid"] = w.Userid
	w.fieldMap["username"] = w.Username
	w.fieldMap["avatar"] = w.Avatar
	w.fieldMap["openid"] = w.Openid
	w.fieldMap["sessionkey"] = w.Sessionkey
	w.fieldMap["userpoint"] = w.Userpoint
	w.fieldMap["userstatus"] = w.Userstatus
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["can_add_recipes"] = w.CanAddRecipes
}

func (w wechatUser) clone(db *gorm.DB) wechatUser {
	w.wechatUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wechatUser) replaceDB(db *gorm.DB) wechatUser {
	w.wechatUserDo.ReplaceDB(db)
	return w
}

type wechatUserDo struct{ gen.DO }

func (w wechatUserDo) Debug() *wechatUserDo {
	return w.withDO(w.DO.Debug())
}

func (w wechatUserDo) WithContext(ctx context.Context) *wechatUserDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wechatUserDo) ReadDB() *wechatUserDo {
	return w.Clauses(dbresolver.Read)
}

func (w wechatUserDo) WriteDB() *wechatUserDo {
	return w.Clauses(dbresolver.Write)
}

func (w wechatUserDo) Session(config *gorm.Session) *wechatUserDo {
	return w.withDO(w.DO.Session(config))
}

func (w wechatUserDo) Clauses(conds ...clause.Expression) *wechatUserDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wechatUserDo) Returning(value interface{}, columns ...string) *wechatUserDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wechatUserDo) Not(conds ...gen.Condition) *wechatUserDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wechatUserDo) Or(conds ...gen.Condition) *wechatUserDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wechatUserDo) Select(conds ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wechatUserDo) Where(conds ...gen.Condition) *wechatUserDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wechatUserDo) Order(conds ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wechatUserDo) Distinct(cols ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wechatUserDo) Omit(cols ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wechatUserDo) Join(table schema.Tabler, on ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wechatUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wechatUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wechatUserDo) Group(cols ...field.Expr) *wechatUserDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wechatUserDo) Having(conds ...gen.Condition) *wechatUserDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wechatUserDo) Limit(limit int) *wechatUserDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wechatUserDo) Offset(offset int) *wechatUserDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wechatUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wechatUserDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wechatUserDo) Unscoped() *wechatUserDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wechatUserDo) Create(values ...*models.WechatUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wechatUserDo) CreateInBatches(values []*models.WechatUser, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wechatUserDo) Save(values ...*models.WechatUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wechatUserDo) First() (*models.WechatUser, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.WechatUser), nil
	}
}

func (w wechatUserDo) Take() (*models.WechatUser, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.WechatUser), nil
	}
}

func (w wechatUserDo) Last() (*models.WechatUser, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.WechatUser), nil
	}
}

func (w wechatUserDo) Find() ([]*models.WechatUser, error) {
	result, err := w.DO.Find()
	return result.([]*models.WechatUser), err
}

func (w wechatUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.WechatUser, err error) {
	buf := make([]*models.WechatUser, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wechatUserDo) FindInBatches(result *[]*models.WechatUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wechatUserDo) Attrs(attrs ...field.AssignExpr) *wechatUserDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wechatUserDo) Assign(attrs ...field.AssignExpr) *wechatUserDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wechatUserDo) Joins(fields ...field.RelationField) *wechatUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wechatUserDo) Preload(fields ...field.RelationField) *wechatUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wechatUserDo) FirstOrInit() (*models.WechatUser, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.WechatUser), nil
	}
}

func (w wechatUserDo) FirstOrCreate() (*models.WechatUser, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.WechatUser), nil
	}
}

func (w wechatUserDo) FindByPage(offset int, limit int) (result []*models.WechatUser, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wechatUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wechatUserDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wechatUserDo) Delete(models ...*models.WechatUser) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wechatUserDo) withDO(do gen.Dao) *wechatUserDo {
	w.DO = *do.(*gen.DO)
	return w
}
