// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-zero-single/app/models/models"
)

func newRecipe(db *gorm.DB, opts ...gen.DOOption) recipe {
	_recipe := recipe{}

	_recipe.recipeDo.UseDB(db, opts...)
	_recipe.recipeDo.UseModel(&models.Recipe{})

	tableName := _recipe.recipeDo.TableName()
	_recipe.ALL = field.NewAsterisk(tableName)
	_recipe.ID = field.NewInt32(tableName, "id")
	_recipe.RecipeID = field.NewInt64(tableName, "recipe_id")
	_recipe.CategoryID = field.NewInt64(tableName, "category_id")
	_recipe.RecipeName = field.NewString(tableName, "recipe_name")
	_recipe.Difficulty = field.NewString(tableName, "difficulty")
	_recipe.Ingredients = field.NewString(tableName, "ingredients")
	_recipe.Directions = field.NewString(tableName, "directions")
	_recipe.Images = field.NewString(tableName, "images")
	_recipe.AuthorID = field.NewInt64(tableName, "author_id")
	_recipe.Status = field.NewInt32(tableName, "status")
	_recipe.CreateTime = field.NewTime(tableName, "create_time")
	_recipe.UpdateTime = field.NewTime(tableName, "update_time")
	_recipe.Cover = field.NewString(tableName, "cover")
	_recipe.IsDelete = field.NewInt32(tableName, "is_delete")

	_recipe.fillFieldMap()

	return _recipe
}

type recipe struct {
	recipeDo

	ALL         field.Asterisk
	ID          field.Int32  // 自增主键
	RecipeID    field.Int64  // 食谱ID（自增主键）
	CategoryID  field.Int64  // 菜谱分类ID（外键，关联recipe_category表）
	RecipeName  field.String // 菜谱名称
	Difficulty  field.String // 难度级别
	Ingredients field.String // 食材列表（可以是JSON格式存储，方便处理多条食材信息）
	Directions  field.String // 制作步骤
	Images      field.String // 菜谱图片URL
	AuthorID    field.Int64  // 创建者用户ID（关联users表）
	Status      field.Int32  // 状态[-1:删除;0:禁用;1启用]
	CreateTime  field.Time   // 数据创建时间
	UpdateTime  field.Time   // 数据更新时间
	Cover       field.String // 菜品封面
	IsDelete    field.Int32  // 菜品是否删除 1 正常 2 删除

	fieldMap map[string]field.Expr
}

func (r recipe) Table(newTableName string) *recipe {
	r.recipeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recipe) As(alias string) *recipe {
	r.recipeDo.DO = *(r.recipeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recipe) updateTableName(table string) *recipe {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.RecipeID = field.NewInt64(table, "recipe_id")
	r.CategoryID = field.NewInt64(table, "category_id")
	r.RecipeName = field.NewString(table, "recipe_name")
	r.Difficulty = field.NewString(table, "difficulty")
	r.Ingredients = field.NewString(table, "ingredients")
	r.Directions = field.NewString(table, "directions")
	r.Images = field.NewString(table, "images")
	r.AuthorID = field.NewInt64(table, "author_id")
	r.Status = field.NewInt32(table, "status")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")
	r.Cover = field.NewString(table, "cover")
	r.IsDelete = field.NewInt32(table, "is_delete")

	r.fillFieldMap()

	return r
}

func (r *recipe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recipe) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 14)
	r.fieldMap["id"] = r.ID
	r.fieldMap["recipe_id"] = r.RecipeID
	r.fieldMap["category_id"] = r.CategoryID
	r.fieldMap["recipe_name"] = r.RecipeName
	r.fieldMap["difficulty"] = r.Difficulty
	r.fieldMap["ingredients"] = r.Ingredients
	r.fieldMap["directions"] = r.Directions
	r.fieldMap["images"] = r.Images
	r.fieldMap["author_id"] = r.AuthorID
	r.fieldMap["status"] = r.Status
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
	r.fieldMap["cover"] = r.Cover
	r.fieldMap["is_delete"] = r.IsDelete
}

func (r recipe) clone(db *gorm.DB) recipe {
	r.recipeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recipe) replaceDB(db *gorm.DB) recipe {
	r.recipeDo.ReplaceDB(db)
	return r
}

type recipeDo struct{ gen.DO }

func (r recipeDo) Debug() *recipeDo {
	return r.withDO(r.DO.Debug())
}

func (r recipeDo) WithContext(ctx context.Context) *recipeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recipeDo) ReadDB() *recipeDo {
	return r.Clauses(dbresolver.Read)
}

func (r recipeDo) WriteDB() *recipeDo {
	return r.Clauses(dbresolver.Write)
}

func (r recipeDo) Session(config *gorm.Session) *recipeDo {
	return r.withDO(r.DO.Session(config))
}

func (r recipeDo) Clauses(conds ...clause.Expression) *recipeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recipeDo) Returning(value interface{}, columns ...string) *recipeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recipeDo) Not(conds ...gen.Condition) *recipeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recipeDo) Or(conds ...gen.Condition) *recipeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recipeDo) Select(conds ...field.Expr) *recipeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recipeDo) Where(conds ...gen.Condition) *recipeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recipeDo) Order(conds ...field.Expr) *recipeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recipeDo) Distinct(cols ...field.Expr) *recipeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recipeDo) Omit(cols ...field.Expr) *recipeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recipeDo) Join(table schema.Tabler, on ...field.Expr) *recipeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recipeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *recipeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recipeDo) RightJoin(table schema.Tabler, on ...field.Expr) *recipeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recipeDo) Group(cols ...field.Expr) *recipeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recipeDo) Having(conds ...gen.Condition) *recipeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recipeDo) Limit(limit int) *recipeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recipeDo) Offset(offset int) *recipeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recipeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *recipeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recipeDo) Unscoped() *recipeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recipeDo) Create(values ...*models.Recipe) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recipeDo) CreateInBatches(values []*models.Recipe, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recipeDo) Save(values ...*models.Recipe) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recipeDo) First() (*models.Recipe, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Recipe), nil
	}
}

func (r recipeDo) Take() (*models.Recipe, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Recipe), nil
	}
}

func (r recipeDo) Last() (*models.Recipe, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Recipe), nil
	}
}

func (r recipeDo) Find() ([]*models.Recipe, error) {
	result, err := r.DO.Find()
	return result.([]*models.Recipe), err
}

func (r recipeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Recipe, err error) {
	buf := make([]*models.Recipe, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recipeDo) FindInBatches(result *[]*models.Recipe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recipeDo) Attrs(attrs ...field.AssignExpr) *recipeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recipeDo) Assign(attrs ...field.AssignExpr) *recipeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recipeDo) Joins(fields ...field.RelationField) *recipeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recipeDo) Preload(fields ...field.RelationField) *recipeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recipeDo) FirstOrInit() (*models.Recipe, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Recipe), nil
	}
}

func (r recipeDo) FirstOrCreate() (*models.Recipe, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Recipe), nil
	}
}

func (r recipeDo) FindByPage(offset int, limit int) (result []*models.Recipe, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recipeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recipeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recipeDo) Delete(models ...*models.Recipe) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recipeDo) withDO(do gen.Dao) *recipeDo {
	r.DO = *do.(*gen.DO)
	return r
}
